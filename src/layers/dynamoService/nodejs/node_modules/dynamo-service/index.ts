import { DynamoDB } from 'aws-sdk'
import { DocumentClient } from 'aws-sdk/clients/dynamodb'
import { Resource } from 'types/index'

const docClient = new DynamoDB.DocumentClient({
  apiVersion: '2012-08-10'
})

const tablePrefix = 'flying-food-cdk'

type UpdateConfig = Omit<DocumentClient.UpdateItemInput, 'TableName' | 'Key'>
type QueryConfig = Omit<DocumentClient.QueryInput, 'TableName'>

export class DynamoService {
  async createItem(resource: Resource, item: Record<string, any>) {
    await docClient.put({
      TableName: this.getTableName(resource),
      Item: item
    }).promise()

    return item
  }

  async getItems(resource: Resource) {
    const { Items } = await docClient.scan({
      TableName: this.getTableName(resource),
    }).promise()

    return Items
  }

  async getItemsById(resource: Resource, ids: string[]) {
    const tableName = this.getTableName(resource)
    const { Responses } = await docClient.batchGet({
      RequestItems: {
        [tableName]: {
          Keys: ids.map(id => ({ id }))
        }
      }
    }).promise()

    return Responses?.[tableName]
  }

  async getItemById(resource: Resource, id: string) {
    const { Item } = await docClient.get({
      TableName: this.getTableName(resource),
      Key: { id }
    }).promise()

    return Item
  }

  async updateAllItems(resource: Resource, updateConfig: UpdateConfig) {
    const items = await this.getItems(resource)

    if (!items) return

    return Promise.all(items.map(({ id }) => docClient.update({
      TableName: this.getTableName(resource),
      Key: { id },
      ...updateConfig
    }).promise()))
  }

  updateItems(
    resource: Resource,
    updates: [string, UpdateConfig][]
  ) {
    return Promise.all(updates.map(([id, update]) => docClient.update({
      TableName: this.getTableName(resource),
      Key: { id },
      ...update
    }).promise()))
  }

  async queryItems(resource: Resource, queryConfig: QueryConfig) {
    const { Items } = await docClient.query({
      TableName: this.getTableName(resource),
      ...queryConfig
    }).promise()

    return Items
  }

  private getTableName(name: string) {
    return `${tablePrefix}_${name}`
  }
}
